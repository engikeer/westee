<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans
       https://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!-- 每个 bean 注册一个组件 -->
    <!-- 注册Person，id 是标识，用于获取该组件 -->
    <!--    <bean id="person01" class="com.mfun.bean.Person">-->
    <!--        <property name="name" value="秦海" />-->
    <!--        <property name="age" value="19" />-->
    <!--        <property name="gender" value="男" />-->
    <!--        <property name="email" value="hai@tt.tt" />-->
    <!--    </bean>-->
    <!--    <bean id="person01" class="com.mfun.bean.Person"-->
    <!--          p:name="秦海" p:age="19" p:gender="男" p:email="hai@tt.tt" />-->
<!--    <bean id="person01" class="com.mfun.bean.Person" p:car-ref="car01"/>-->
<!--    <bean id="car01" class="com.mfun.bean.Car" p:name="奥迪" p:price="51000" />-->

    <context:component-scan base-package="com.mfun" />
    <aop:aspectj-autoproxy />

<!--    <aop:config>-->
<!--        <aop:pointcut id="add" expression="execution(public int com.mfun.proxy.Calculator.div(int, int))"/>-->
<!--        <aop:aspect ref="logUtil">-->
<!--            <aop:after-returning method="returning" pointcut-ref="add" returning="result" />-->
<!--            <aop:around method="around" pointcut-ref="add" />-->
<!--            <aop:after-throwing method="throwing" pointcut-ref="add" throwing="e" />-->
<!--            <aop:after method="ff" pointcut-ref="add" />-->
<!--            <aop:before method="start" pointcut-ref="add" />-->
<!--        </aop:aspect>-->

<!--        <aop:aspect ref="...">-->
<!--            ....-->
<!--        </aop:aspect>-->
<!--    </aop:config>-->


    <context:property-placeholder location="classpath:db.properties" file-encoding="UTF-8"/>

    <!-- 数据源 -->
    <bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig">
        <constructor-arg>
            <props>
                <prop key="jdbcUrl">${jdbcUrl}</prop>
                <prop key="username">${username}</prop>
                <prop key="password">${password}</prop>
                <prop key="dataSource.cachePrepStmts">${dataSource.cachePrepStmts}</prop>
                <prop key="dataSource.prepStmtCacheSize">${dataSource.prepStmtCacheSize}</prop>
                <prop key="dataSource.prepStmtCacheSqlLimit">${dataSource.prepStmtCacheSqlLimit}</prop>
                <prop key="dataSource.useServerPrepStmts">${dataSource.useServerPrepStmts}</prop>
                <prop key="dataSource.useLocalSessionState">${dataSource.useLocalSessionState}</prop>
                <prop key="dataSource.rewriteBatchedStatements">${dataSource.rewriteBatchedStatements}</prop>
                <prop key="dataSource.cacheResultSetMetadata">${dataSource.cacheResultSetMetadata}</prop>
                <prop key="dataSource.cacheServerConfiguration">${dataSource.cacheServerConfiguration}</prop>
                <prop key="dataSource.elideSetAutoCommits">${dataSource.elideSetAutoCommits}</prop>
                <prop key="dataSource.maintainTimeStats">${dataSource.maintainTimeStats}</prop>
            </props>
        </constructor-arg>
    </bean>
    <bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource">
        <constructor-arg ref="hikariConfig"/>
    </bean>

    <!-- jdbcTemplate -->
<!--    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">-->
<!--        <constructor-arg name="dataSource" ref="dataSource" />-->
<!--    </bean>-->

    <!-- 事务管理器 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- 基于注解的事务控制 -->
    <tx:annotation-driven />

    <!-- 基于配置的事务控制 -->
<!--    <bean id="bookService" class="com.mfun.service.BookServiceImpl" />-->

<!--    <aop:config>-->
<!--        <aop:pointcut id="txPointcut" expression="execution(* com.mfun.servi*.*.*(..))"/>-->
<!--        &lt;!&ndash; 配置事务通知，advice-ref 指定使用的 tx:advice，切入点表达式指定会被切入的方法，被切入的方法不一定都有事务行为 &ndash;&gt;-->
<!--        <aop:advisor advice-ref="myAdvice" pointcut-ref="txPointcut"/>-->
<!--    </aop:config>-->

<!--    <tx:advice id="myAdvice" transaction-manager="transactionManager">-->
<!--        <tx:attributes>-->
<!--            &lt;!&ndash; 指定需要有事务行为的方法 &ndash;&gt;-->
<!--            <tx:method name="*"/>-->
<!--            <tx:method name="checkout" isolation="READ_COMMITTED" propagation="REQUIRES_NEW"/>-->
<!--            <tx:method name="get*" read-only="true" />-->
<!--        </tx:attributes>-->
<!--    </tx:advice>-->


</beans>